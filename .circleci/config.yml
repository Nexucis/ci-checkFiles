version: 2
jobs:
  build-test-ubuntu-image:
    docker:
      - image: circleci/openjdk:8-jdk
    working_directory: ~/repo
    steps:
      - checkout
      - setup_remote_docker
      - run: ./build.sh --build-ubuntu
      - run: docker run --rm -v ${PWD}:/var/workspace/project nexucis/ci-checkfiles:dev-master /bin/bash -c "cd /var/workspace/project && checkEOL *.md *.sh Dockerfile"
      - run: docker run --rm -v ${PWD}:/var/workspace/project nexucis/ci-checkfiles:dev-master /bin/bash -c "cd /var/workspace/project && checkEncoding utf-8 *.md *.sh Dockerfile"
      - run: |
          docker create -v /var/workspace/project --name container-holding-volume alpine:3.4 /bin/true
          docker cp ./ container-holding-volume:/var/workspace/project
          result=$(docker run --volumes-from container-holding-volume nexucis/ci-checkfiles:dev-master /bin/bash -c "cd /var/workspace/project && checkEOL *.test")
          if [ ${result} != 0 ]; then
            echo "Good the check failed"
          else
            echo "this test must fail"
            exit 1
          fi
      - run: |
          docker run --rm -v ${PWD}:/var/workspace/project nexucis/ci-checkfiles:dev-master /bin/bash -c "cd /var/workspace/project && ls file-test/ && checkEncoding utf-8 *.test"
          if [ $? != 0 ]; then
            echo "Good the check failed"
          else
            echo "this test must fail"
            exit 1
          fi

  build-push-ubuntu-image:
    docker:
      - image: circleci/openjdk:8-jdk
    working_directory: ~/repo
    steps:
      - checkout
      - setup_remote_docker
      - run: ./build.sh --build-ubuntu
      - run: ./build.sh --connect
      - run: ./build.sh --push "dev-master"

  build-test-alpine-image:
    docker:
      - image: circleci/openjdk:8-jdk
    working_directory: ~/repo
    steps:
      - checkout
      - setup_remote_docker
      - run: ./build.sh --build-alpine
      - run: docker run --rm -v ${PWD}:/var/workspace/project nexucis/ci-checkfiles:dev-master-alpine /bin/bash -c "cd /var/workspace/project && checkEOL *.md *.sh Dockerfile"
      - run: docker run --rm -v ${PWD}:/var/workspace/project nexucis/ci-checkfiles:dev-master-alpine /bin/bash -c "cd /var/workspace/project && checkEncoding utf-8 *.md *.sh Dockerfile"
      - run: |
          docker run --rm -v ${PWD}:/var/workspace/project nexucis/ci-checkfiles:dev-master-alpine /bin/bash -c "cd /var/workspace/project && checkEOL *.test"
          if [ $? != 0 ]; then
            echo "Good the check failed"
          else
            echo "this test must fail"
            exit 1
          fi
      - run: |
          docker run --rm -v ${PWD}:/var/workspace/project nexucis/ci-checkfiles:dev-master-alpine /bin/bash -c "cd /var/workspace/project && checkEncoding utf-8 *.test"
          if [ $? != 0 ]; then
            echo "Good the check failed"
          else
            echo "this test must fail"
            exit 1
          fi

  build-push-alpine-image:
    docker:
      - image: circleci/openjdk:8-jdk
    working_directory: ~/repo
    steps:
      - checkout
      - setup_remote_docker
      - run: ./build.sh --build-alpine
      - run: ./build.sh --connect
      - run: ./build.sh --push "dev-master-alpine"

  push-tag-docker:
    docker:
      - image: circleci/openjdk:8-jdk
    working_directory: ~/repo
    steps:
      - setup_remote_docker
      - run: ./build.sh --connect
      - run: ./build.sh --tag "dev-master" ${CIRCLE_TAG}
      - run: ./build.sh --tag "dev-master" latest
      - run: ./build.sh --tag "dev-master-alpine" ${CIRCLE_TAG}-alpine
      - run: ./build.sh --push latest
      - run: ./build.sh --push ${CIRCLE_TAG}
      - run: ./build.sh --push ${CIRCLE_TAG}-alpine

workflows:
  version: 2
  build_and_push:
    jobs:
      - build-test-ubuntu-image
      - build-test-alpine-image
      - build-push-ubuntu-image:
          requires:
            - build-test-ubuntu-image
            - build-test-alpine-image
          filters:
            branches:
              only:
                - master
      - build-push-alpine-image:
          requires:
            - build-test-ubuntu-image
            - build-test-alpine-image
          filters:
            branches:
              only:
                - master
      - hold-push:
          type: approval
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
      - push-tag-docker:
          requires:
            - hold-push
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/